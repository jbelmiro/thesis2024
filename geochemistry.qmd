---
title: "geochemistry"

execute:
  echo: false
  warning: false
  message: false
  comment: "#>"
  fig-path: "../figures/"
  fig-dpi: 600
---

```{r}
#| label: libraries

library(readr)
library(dplyr)
library(janitor)
library(tidyr)
library(gt)
library(ggplot2)
library(cowplot)
# Load required libraries
library(tidyverse)
library(ggfortify)
library(FactoMineR)
library(factoextra)

```

# X-ray diffraction (XRD)

# Scanning electron microscopy and energy dispersive X-ray spectroscopy (SEM-EDS)

# Portable X-ray fluorescence (pXRF)

```{r}
#| label: database-read

pxrf_raw <- read_csv('data/pxrf_data_dec.csv')

```

```{r}
#| label: database-setup

## DB setup
pxrf_raw <- pxrf_raw |> 
  filter(!Sample_ID %in% c("I19-1751", "H21-2126")) # Removing 2 altered samples
pxrf_analysis <- pxrf_raw |> 
  select("Sample_ID", "pXRF_ID", "Formation/Type",
         "MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "Fe2O3", "Cu",
         "Sr", "Zr") |>  # Removed elements with 0 or <LOD values in all samples or in high percentages in all groups
  mutate(`Formation/Type` = case_when(
    `Formation/Type` == "TYPE 1" ~ "T1",
    `Formation/Type` == "TYPE 2" | `Formation/Type` == "TYPE 2B" | `Formation/Type` == "TYPE 2R" ~ "T2",
    `Formation/Type` == "TYPE 3" ~ "T3",
    `Formation/Type` == "TYPE 4" ~ "T4",
    `Formation/Type` == "TYPE 5" ~ "T5",
    `Formation/Type` == "TYPE 6" | `Formation/Type` == "TYPE 6LLB" | `Formation/Type` == "TYPE 6E" ~ "T6",
    `Formation/Type` == "TYPE 7" ~ "T7",
    `Formation/Type` == "TYPE 8" ~ "T8",
    `Formation/Type` == "TYPE 9" ~ "T9",
    `Formation/Type` == "TYPE 10" ~ "T10",
    `Formation/Type` == "TYPE 11" ~ "T11",
    TRUE ~ `Formation/Type`
  ))
  
```

```{r}
#| label: PCA

## a) PCA geological regional cherts
pca_db_algarve <- pxrf_raw |> 
  select(`Formation/Type`, P2O5, S, Cl, K2O, CaO, TiO2, Fe2O3) |>
  filter(`Formation/Type` %in% c("LJW", "MJE", "UJE", "UJW", "TW"))
# Convert "< LOD" values to NA
pca_db_algarve[pca_db_algarve == "< LOD"] <- NA
# Keep Group column separately before PCA
pca_db_algarve$`Formation/Type` <- as.factor(pca_db_algarve$`Formation/Type`)  # Ensure it's a factor
group_var_algarve <- pca_db_algarve$`Formation/Type`  
# Convert numeric columns correctly
df_numeric_alg <- pca_db_algarve %>%
  select(-`Formation/Type`) %>%  # Remove Group for PCA
  mutate(across(everything(), as.numeric))  # Convert all columns to numeric
# Remove rows with NA (important: also filter group_var!)
complete_cases_alg <- complete.cases(df_numeric_alg)  # Identify complete rows
df_numeric_alg <- df_numeric_alg[complete_cases, ]  # Remove NA rows
group_var_algarve <- group_var_algarve[complete_cases]  # Filter group_var accordingly
# Scale values
df_scaled_alg <- scale(df_numeric_alg)
# Ensure row names are properly set
rownames(df_scaled_alg) <- make.names(group_var_algarve, unique = TRUE)
# Perform PCA
pca_result_alg <- PCA(df_scaled_alg, graph = FALSE)
# Summary of PCA
summary(pca_result_alg)
fviz_eig(pca_result_alg, addlabels = TRUE, ylim = c(0, 100))
# PCA Biplot with Groups
biplot_alg <- fviz_pca_biplot(pca_result_alg, 
                label = "var", 
                habillage = group_var_algarve,  # Use stored group column
                addEllipses = TRUE, 
                ellipse.level = 0.95) +
  ggtitle(NULL)
# Add Group column back for visualization
df_pca_alg <- data.frame(pca_result_alg$ind$coord, Group = group_var_algarve)
# PCA plot with groups
scatter_alg <- ggplot(df_pca_alg, aes(x = Dim.1, y = Dim.2, color = Group, shape = Group)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(level = 0.95, aes(fill = Group), alpha = 0.2, geom = "polygon") +
  theme_minimal() +
  labs(title = "PCA of pXRF Data", x = "PC1", y = "PC2") +
  theme(legend.position = "right")

## b) PCA of geological cherts: local Lower Jurassic, Central Portugal and Cadiz
pca_db_nl <- pxrf_raw |> 
  select(`Formation/Type`, P2O5, K2O, TiO2, Fe2O3, Cu, S) |> # Removing CaO which is high NA in CPT
  filter(`Formation/Type` %in% c("LJW", "CPT", "UCA"))
# Convert "< LOD" values to NA
pca_db_nl[pca_db_nl == "< LOD"] <- NA
# Keep Group column separately before PCA
pca_db_nl$`Formation/Type` <- as.factor(pca_db_nl$`Formation/Type`)  # Ensure it's a factor
group_var_nl <- pca_db_nl$`Formation/Type`  
# Convert numeric columns correctly
df_numeric_nl <- pca_db_nl %>%
  select(-`Formation/Type`) %>%  # Remove Group for PCA
  mutate(across(everything(), as.numeric))  # Convert all columns to numeric
# Remove rows with NA (important: also filter group_var!)
complete_cases_nl <- complete.cases(df_numeric_nl)  # Identify complete rows
df_numeric_nl <- df_numeric_nl[complete_cases_nl, ]  # Remove NA rows
group_var_nl <- group_var_nl[complete_cases_nl]  # Filter group_var accordingly
# Scale values
df_scaled_nl <- scale(df_numeric_nl)
# Ensure row names are properly set
rownames(df_scaled_nl) <- make.names(group_var_nl, unique = TRUE)
# Perform PCA
pca_result_nl <- PCA(df_scaled_nl, graph = FALSE)
# Summary of PCA
summary(pca_result_nl)
fviz_eig(pca_result_nl, addlabels = TRUE, ylim = c(0, 100))
# PCA Biplot with Groups
biplot_nl <- fviz_pca_biplot(pca_result_nl, 
                label = "var", 
                habillage = group_var_nl,  # Use stored group column
                addEllipses = TRUE, 
                ellipse.level = 0.95) +
  ggtitle(NULL)
# Add Group column back for visualization
df_pca_nl <- data.frame(pca_result_nl$ind$coord, Group = group_var_nl)
# PCA plot with groups
scatter_nl <- ggplot(df_pca_nl, aes(x = Dim.1, y = Dim.2, color = Group, shape = Group)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(level = 0.95, aes(fill = Group), alpha = 0.2, geom = "polygon") +
  theme_minimal() +
  labs(title = "PCA of pXRF Data", x = "PC1", y = "PC2") +
  theme(legend.position = "right")

## c) PCA archaeological T6 compared to local Lower Jurassic and Central Portugal
pca_db_comp <- pxrf_raw |> 
  select(`Formation/Type`, P2O5, K2O, TiO2, Fe2O3, Cu, S) |> # Removing CaO which is high NA in CPT
  mutate(`Formation/Type` = case_when(
    `Formation/Type` == "TYPE 1" ~ "T1",
    `Formation/Type` == "TYPE 2" | `Formation/Type` == "TYPE 2B" | `Formation/Type` == "TYPE 2R" ~ "T2",
    `Formation/Type` == "TYPE 3" ~ "T3",
    `Formation/Type` == "TYPE 4" ~ "T4",
    `Formation/Type` == "TYPE 5" ~ "T5",
    `Formation/Type` == "TYPE 6" | `Formation/Type` == "TYPE 6LLB" | `Formation/Type` == "TYPE 6E" ~ "T6",
    `Formation/Type` == "TYPE 7" ~ "T7",
    `Formation/Type` == "TYPE 8" ~ "T8",
    `Formation/Type` == "TYPE 9" ~ "T9",
    `Formation/Type` == "TYPE 10" ~ "T10",
    `Formation/Type` == "TYPE 11" ~ "T11",
    TRUE ~ `Formation/Type`
  )) |> 
  filter(`Formation/Type` %in% c("LJW","CPT", "T6"))
# Convert "< LOD" values to NA
pca_db_comp[pca_db_comp == "< LOD"] <- NA
# Keep Group column separately before PCA
pca_db_comp$`Formation/Type` <- as.factor(pca_db_comp$`Formation/Type`)  # Ensure it's a factor
group_var_comp <- pca_db_comp$`Formation/Type`  
# Convert numeric columns correctly
df_numeric_comp <- pca_db_comp %>%
  select(-`Formation/Type`) %>%  # Remove Group for PCA
  mutate(across(everything(), as.numeric))  # Convert all columns to numeric
# Remove rows with NA (important: also filter group_var!)
complete_cases_comp <- complete.cases(df_numeric_comp)  # Identify complete rows
df_numeric_comp <- df_numeric_comp[complete_cases_comp, ]  # Remove NA rows
group_var_comp <- group_var_comp[complete_cases_comp]  # Filter group_var accordingly
# Scale values
df_scaled_comp <- scale(df_numeric_comp)
# Ensure row names are properly set
rownames(df_scaled_comp) <- make.names(group_var_comp, unique = TRUE)
# Perform PCA
pca_result_comp <- PCA(df_scaled_comp, graph = FALSE)
# Summary of PCA
summary(pca_result_comp)
fviz_eig(pca_result_comp, addlabels = TRUE, ylim = c(0, 100))
# PCA Biplot with Groups
biplot_comp <- fviz_pca_biplot(pca_result_comp, 
                label = "var", 
                habillage = group_var_comp,  # Use stored group column
                addEllipses = TRUE, 
                ellipse.level = 0.80) +
  ggtitle(NULL)
# Add Group column back for visualization
df_pca_comp <- data.frame(pca_result_comp$ind$coord, Group = group_var_comp)
# PCA plot with groups
scatter_comp <- ggplot(df_pca_comp, aes(x = Dim.1, y = Dim.2, color = Group, shape = Group)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(level = 0.95, aes(fill = Group), alpha = 0.2, geom = "polygon") +
  theme_minimal() +
  labs(title = "PCA of pXRF Data", x = "PC1", y = "PC2") +
  theme(legend.position = "right")

## d) PCA archaeological local cherts T2-5 and non-local T7 compared with local Lower Jurassic and UCA cherts
pca_db_comp2 <- pxrf_raw |> 
  select(`Formation/Type`, P2O5, TiO2, K2O,Fe2O3, Cu, S) |> # Removing CaO which is high NA in CPT
  mutate(`Formation/Type` = case_when(
    `Formation/Type` == "TYPE 1" ~ "T1",
    `Formation/Type` == "TYPE 2" | `Formation/Type` == "TYPE 2B" | `Formation/Type` == "TYPE 2R" ~ "T2-5",
    `Formation/Type` == "TYPE 3" ~ "T2-5",
    `Formation/Type` == "TYPE 4" ~ "T2-5",
    `Formation/Type` == "TYPE 5" ~ "T2-5",
    `Formation/Type` == "TYPE 6" | `Formation/Type` == "TYPE 6LLB" | `Formation/Type` == "TYPE 6E" ~ "T6",
    `Formation/Type` == "TYPE 7" ~ "T7",
    `Formation/Type` == "TYPE 8" ~ "T8",
    `Formation/Type` == "TYPE 9" ~ "T9",
    `Formation/Type` == "TYPE 10" ~ "T10",
    `Formation/Type` == "TYPE 11" ~ "T11",
    TRUE ~ `Formation/Type`
  )) |> 
  filter(`Formation/Type` %in% c("LJW","UCA", "T7", "T2-5"))
# Convert "< LOD" values to NA
pca_db_comp2[pca_db_comp2 == "< LOD"] <- NA
# Keep Group column separately before PCA
pca_db_comp2$`Formation/Type` <- as.factor(pca_db_comp2$`Formation/Type`)  # Ensure it's a factor
group_var_comp2 <- pca_db_comp2$`Formation/Type`  
# Convert numeric columns correctly
df_numeric_comp2 <- pca_db_comp2 %>%
  select(-`Formation/Type`) %>%  # Remove Group for PCA
  mutate(across(everything(), as.numeric))  # Convert all columns to numeric
# Remove rows with NA (important: also filter group_var!)
complete_cases_comp2 <- complete.cases(df_numeric_comp2)  # Identify complete rows
df_numeric_comp2 <- df_numeric_comp2[complete_cases_comp2, ]  # Remove NA rows
group_var_comp2 <- group_var_comp2[complete_cases_comp2]  # Filter group_var accordingly
# Scale values
df_scaled_comp2 <- scale(df_numeric_comp2)
# Ensure row names are properly set
rownames(df_scaled_comp2) <- make.names(group_var_comp2, unique = TRUE)
# Perform PCA
pca_result_comp2 <- PCA(df_scaled_comp2, graph = FALSE)
# Summary of PCA
summary(pca_result_comp2)
fviz_eig(pca_result_comp2, addlabels = TRUE, ylim = c(0, 100))
# PCA Biplot with Groups
biplot_comp2 <- fviz_pca_biplot(pca_result_comp2, 
                label = "var", 
                habillage = group_var_comp2,  # Use stored group column
                addEllipses = TRUE, 
                ellipse.level = 0.80) +
  ggtitle(NULL)
# Add Group column back for visualization
df_pca_comp2 <- data.frame(pca_result_comp2$ind$coord, Group = group_var_comp2)
# PCA plot with groups
scatter_comp2 <- ggplot(df_pca_comp2, aes(x = Dim.1, y = Dim.2, color = Group, shape = Group)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(level = 0.95, aes(fill = Group), alpha = 0.2, geom = "polygon") +
  theme_minimal() +
  labs(x = "PC1", y = "PC2") +
  theme(legend.position = "right")

```

```{r}
#| label: fig-pca
#| fig-cap: Several pcas

plot_grid(biplot_alg, biplot_nl, biplot_comp, biplot_comp2, labels = c("a", "b", "c", "d"))

```


```{r}
#| label: boxplots

# Boxplot data preparation
boxplots_pxrf <- pxrf_analysis |> 
  select(-Sample_ID, -pXRF_ID) |> 
  mutate(across(-`Formation/Type`, ~ as.numeric(.)))
  #pivot_longer(cols = c("MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "Fe2O3", "Cu",
        # "Sr", "Zr"), names_to = "Variable", values_to = "Value")
boxplots_pxrf <- boxplots_pxrf |> 
  mutate(`Formation/Type` = factor(`Formation/Type`, levels = c("TW", "LJW", "MJE", "UJW", "UJE", "CPT", "UCA", "T1", "T2",
                                                                "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10", "T11")))
## MgO
count_data_mgo <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, MgO) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(MgO)) |> 
  summarise(n = n(), .groups = "drop") 

b1 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = MgO)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_mgo, aes(x = `Formation/Type`, y = 0.5, label = n), size = 3) +
  theme_minimal()

## Al2O3
count_data_al2o3 <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Al2O3) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Al2O3)) |> 
  summarise(n = n(), .groups = "drop") 

b2 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Al2O3)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_al2o3, aes(x = `Formation/Type`, y = 0, label = n), size = 3) +
  theme_minimal()

## SiO2
count_data_sio2 <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, SiO2) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(SiO2)) |> 
  summarise(n = n(), .groups = "drop") 

b3 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = SiO2)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_sio2, aes(x = `Formation/Type`, y = 40, label = n), size = 3) +
  theme_minimal()

## P2O5
count_data_p2o5 <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, P2O5) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(P2O5)) |> 
  summarise(n = n(), .groups = "drop") 

b4 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = P2O5)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_p2o5, aes(x = `Formation/Type`, y = 0, label = n), size = 3) +
  theme_minimal()

## S
count_data_s <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, S) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(S)) |> 
  summarise(n = n(), .groups = "drop") 

b5 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = S)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_s, aes(x = `Formation/Type`, y = -0.1, label = n), size = 3) +
  theme_minimal()

## Cl
count_data_cl <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Cl) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Cl)) |> 
  summarise(n = n(), .groups = "drop") 

b6 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Cl)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_cl, aes(x = `Formation/Type`, y = -0.05, label = n), size = 3) +
  coord_cartesian(ylim = c(-0.05, 0.75)) +
  theme_minimal()

## K2O
count_data_k2o <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, K2O) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(K2O)) |> 
  summarise(n = n(), .groups = "drop") 

b7 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = K2O)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_k2o, aes(x = `Formation/Type`, y = -0.05, label = n), size = 3) +
  theme_minimal()

## CaO
count_data_cao <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, CaO) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(CaO)) |> 
  summarise(n = n(), .groups = "drop") 

b8 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = CaO)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_cao, aes(x = `Formation/Type`, y = -0.3, label = n), size = 3) +
  theme_minimal()

## TiO2
count_data_tio2 <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, TiO2) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(TiO2)) |> 
  summarise(n = n(), .groups = "drop") 

b9 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = TiO2)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_tio2, aes(x = `Formation/Type`, y = -0.02, label = n), size = 3) +
  theme_minimal()

## Fe2O3
count_data_fe2o3 <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Fe2O3) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Fe2O3)) |> 
  summarise(n = n(), .groups = "drop") 

b10 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Fe2O3)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_fe2o3, aes(x = `Formation/Type`, y = 0, label = n), size = 3) +
  theme_minimal()

## Cu
count_data_cu <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Cu) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Cu)) |> 
  summarise(n = n(), .groups = "drop") 

b11 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Cu)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_cu, aes(x = `Formation/Type`, y = 0, label = n), size = 3) +
  theme_minimal()

## Sr
count_data_sr <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Sr) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Sr)) |> 
  summarise(n = n(), .groups = "drop") 

b12 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Sr)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_sr, aes(x = `Formation/Type`, y = -0.005, label = n), size = 3) +
  theme_minimal()

## Zr
count_data_zr <- boxplots_pxrf |> # Count number of observations per group where Value > 0
  select(`Formation/Type`, Zr) |> 
  group_by(`Formation/Type`) |> 
  filter(!is.na(Zr)) |> 
  summarise(n = n(), .groups = "drop") 

b13 <- boxplots_pxrf |> 
  ggplot(aes(x = `Formation/Type`, y = Zr)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  geom_text(data = count_data_zr, aes(x = ` `, y = 0, label = n), size = 3) +
  theme_minimal()

boxplots_pxrf_all <- pxrf_analysis |> 
  select(-Sample_ID, -pXRF_ID) |> 
  mutate(across(-`Formation/Type`, ~ as.numeric(.))) |> 
  pivot_longer(cols = c("MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "Fe2O3", "Cu",
        "Sr", "Zr"), names_to = "Variable", values_to = "Value")
  
boxplots_pxrf_all |> 
  ggplot(aes(x = `Formation/Type`, y = Value)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 18) +
  facet_wrap(~Variable, scales = "free") +
  #geom_text(data = count_data_zr, aes(x = ` `, y = 0, label = n), size = 3) +
  theme_minimal()  

```

```{r}
#| label: fig-boxplots
#| fig-cap: A group of boxplots.

plot_grid(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m"))

```


```{r}
#| label: tbl-occurrences
#| tbl-cap: A table.
#| include: false

# Table to see the occurrence of 0 or <LOD values within each element and by rm type, to choose the elements in which to apply statistics.
# Combine the multiple columns into a single table
combined_table <- pxrf_raw |>
  select("Sample_ID", "pXRF_ID", "Formation/Type",
         "MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "V", "MnO", "Fe2O3", "Cu", "As", "Rb",
         "Sr", "Y", "Zr", "Mo", "Ag", "Ba", "Ce", "W", "Au", "Pb") |> 
  mutate(across(
    .cols = c("MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "V", "MnO", "Fe2O3", "Cu", "As", "Rb",
         "Sr", "Y", "Zr", "Mo", "Ag", "Ba", "Ce", "W", "Au", "Pb"),
    .fns = ~ case_when(
      . == 0 | . == "< LOD" ~ "No",
      . > 0 ~ "Yes",
      TRUE ~ as.character(.))
    )) |> 
  mutate(`Chert type` = case_when(
    `Formation/Type` == "TYPE 2B" | `Formation/Type` == "TYPE 2R" ~ "TYPE 2",
    `Formation/Type` == "TYPE 6LLB" | `Formation/Type` == "TYPE 6E" ~ "TYPE 6",
    TRUE ~ `Formation/Type`))

tbl_MgO <- combined_table |> 
  tabyl(`Chert type`, MgO) |>
  adorn_percentages("row") |> 
  adorn_pct_formatting(digits = 1) |> 
  select("Chert type", Yes) |> 
  rename(MgO = Yes)
# Al2O3
tbl_Al2O3 <- combined_table |> 
  tabyl(`Chert type`, Al2O3) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>
  select("Chert type", Yes) |> 
  rename(Al2O3 = Yes)
# SiO2
tbl_SiO2 <- combined_table |> 
  tabyl(`Chert type`, SiO2) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>
  select("Chert type", Yes) |> 
  rename(SiO2 = Yes)
# P2O5
tbl_P2O5 <- combined_table |> 
  tabyl(`Chert type`, P2O5) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(P2O5 = Yes)
# S
tbl_S <- combined_table |> 
  tabyl(`Chert type`, S) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(S = Yes)
# Cl
tbl_Cl <- combined_table |> 
  tabyl(`Chert type`, Cl) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Cl = Yes)
# K2O has 100% rate
tbl_K2O <- combined_table |> 
  tabyl(`Chert type`, K2O) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(K2O = Yes)
# CaO
tbl_CaO <- combined_table |> 
  tabyl(`Chert type`, CaO) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(CaO = Yes)
# TiO2
tbl_TiO2 <- combined_table |> 
  tabyl(`Chert type`, TiO2) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(TiO2 = Yes)
# V
tbl_V <- combined_table |> 
  tabyl(`Chert type`, V) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(V = Yes)
# MnO
tbl_MnO <- combined_table |> 
  tabyl(`Chert type`, MnO) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(MnO = Yes)
# Fe2O3 has 100% rate
tbl_Fe2O3 <- combined_table |> 
  tabyl(`Chert type`, Fe2O3) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Fe2O3 = Yes)
# Cu
tbl_Cu <- combined_table |> 
  tabyl(`Chert type`, Cu) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Cu = Yes)
# As
tbl_As <- combined_table |> 
  tabyl(`Chert type`, As) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(As = Yes)
# Rb
tbl_Rb <- combined_table |> 
  tabyl(`Chert type`, Rb) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Rb = Yes)
# Sr
tbl_Sr <- combined_table |> 
  tabyl(`Chert type`, Sr) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Sr = Yes)
# Y
tbl_Y <- combined_table |> 
  tabyl(`Chert type`, Y) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Y = Yes)
# Zr
tbl_Zr <- combined_table |> 
  tabyl(`Chert type`, Zr) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Zr = Yes)
# Mo
tbl_Mo <- combined_table |> 
  tabyl(`Chert type`, Mo) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Mo = Yes)
# Ag
tbl_Ag <- combined_table |> 
  tabyl(`Chert type`, Ag) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Ag = Yes)
# Ba
tbl_Ba <- combined_table |> 
  tabyl(`Chert type`, Ba) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Ba = Yes)
# Ce
tbl_Ce <- combined_table |> 
  tabyl(`Chert type`, Ce) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Ce = Yes)
# W
tbl_W <- combined_table |> 
  tabyl(`Chert type`, W) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(W = Yes)
# Au
tbl_Au <- combined_table |> 
  tabyl(`Chert type`, Au) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>

  select("Chert type", Yes) |> 
  rename(Au = Yes)
# Pb
tbl_Pb <- combined_table |> 
  tabyl(`Chert type`, Pb) |>
  adorn_percentages("row") |>                   
  adorn_pct_formatting(digits = 1) |>
  select("Chert type", Yes) |> 
  rename(Pb = Yes)

combined_tbl <- tbl_MgO |> 
  full_join(tbl_Al2O3, by = "Chert type") |> 
  full_join(tbl_SiO2, by = "Chert type") |>
  full_join(tbl_P2O5, by = "Chert type") |> 
  full_join(tbl_S, by = "Chert type") |> 
  full_join(tbl_Cl, by = "Chert type") |> 
  full_join(tbl_K2O, by = "Chert type") |> 
  full_join(tbl_CaO, by = "Chert type") |> 
  full_join(tbl_TiO2, by = "Chert type") |> 
  full_join(tbl_V, by = "Chert type") |> 
  full_join(tbl_MnO, by = "Chert type") |> 
  full_join(tbl_Fe2O3, by = "Chert type") |> 
  full_join(tbl_Cu, by = "Chert type") |> 
  full_join(tbl_As, by = "Chert type") |> 
  full_join(tbl_Rb, by = "Chert type") |> 
  full_join(tbl_Sr, by = "Chert type") |> 
  full_join(tbl_Y, by = "Chert type") |> 
  full_join(tbl_Zr, by = "Chert type") |> 
  full_join(tbl_Mo, by = "Chert type") |> 
  full_join(tbl_Ag, by = "Chert type") |> 
  full_join(tbl_Ba, by = "Chert type") |> 
  full_join(tbl_Ce, by = "Chert type") |> 
  full_join(tbl_W, by = "Chert type") |> 
  full_join(tbl_Au, by = "Chert type") |> 
  full_join(tbl_Pb, by = "Chert type")

combined_tbl[, 2:26] <- lapply(combined_tbl[, 2:26], function(x) as.numeric(sub("%", "", x)))
gt(combined_tbl) %>%
  data_color(
    columns = vars("MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "V", "MnO", "Fe2O3", "Cu", "As", "Rb",
         "Sr", "Y", "Zr", "Mo", "Ag", "Ba", "Ce", "W", "Au", "Pb"),  # Multiple columns
    colors = scales::col_numeric(
      palette = c("#f8f0fc", "#dab6fc", "#b6f7c1"), # Gradient from red to green
      domain = c(0, 100))
  )

```

```{r}
#| label: averages

pxrf_average <- pxrf_analysis |> 
  select(-Sample_ID, -pXRF_ID) |> 
  mutate(across(-`Formation/Type`, ~ as.numeric(.))) |>    # Convert valid numbers
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), 0, .))) |>  # Replace NAs with 0
  group_by(`Formation/Type`) |> 
  summarise(across(where(is.numeric), ~ round(mean(.), 4)))
  pivot_wider(names_from = `Formation/Type`,
              values_from = c("MgO", "Al2O3", "SiO2", "P2O5", "S", "Cl", "K2O", "CaO", "TiO2", "Fe2O3", "Cu",
         "Sr", "Zr"))

average_MgO <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = MgO)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "MgO")

average_Al2O3 <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = Al2O3)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "Al2O3")

average_SiO2 <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = SiO2)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "SiO2")

average_P2O5 <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = P2O5)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "P2O5")

average_S <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = S)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "S")

average_Cl <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = Cl)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "Cl")

average_K2O <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = K2O)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "K2O")

average_CaO <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = CaO)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "CaO")

average_TiO2 <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = TiO2)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "TiO2")

average_Fe2O3 <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = Fe2O3)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "Fe2O3")

average_Sr <- pxrf_average |> 
  ggplot(aes(x = `Formation/Type`, y = Sr)) +
  geom_bar(stat = "identity") +
  theme_minimal() + 
  labs(x = " ",y = "Sr")

```


## Methodology

For this experiment, a Bruker portable XRF Titan S1 was used in a laboratory benchtop setup, using battery power (up to 25% battery charge then replaced by a fully charged battery). A validation run was applied on two standard samples provided by Bruker and using the standard calibration. Samples were scanned for 180 seconds each (90 seconds for the first phase for major elements and 90 seconds for the second phase for minor elements), at least once, with several scans applied to samples that showed macroscopic variability (e.g., areas with different colours or translucency). The standard database from Bruker was used, with the Geochem application and Dual Mining method. \*\* chert samples were scanned, from several sources and chert types, both geological and archaeological. After scanning, the scanned face was measured (thickness and diameter), to guarantee a minimum thickness and size was followed for each sample, since other studies have shown thickness and size may impact the homogeneity of data collection and results [@newlanderEmpiricalStudyEffect2015]. All samples, including their thickness and diameter, can be found in table X. For geological samples, fresh, flat surfaces were scanned, avoiding altered faces or cortex; whenever necessary, the samples were prepared by breaking the nodules. The samples were chosen to represent all varieties of chert identified in the Algarve region, in the archaeological record of Vale Boi, but also from other regions such as Central Portugal and South Spain, to allow their comparison and test hypotheses made from macroscopic and petrographic data. For archaeological samples, artefacts were chosen from previously identified types (REF?), focusing on larger and flatter morphologies, with the least degree of surface alterations possible.

The analysis and result reporting protocol was established following previous studies, focusing on the accuracy of obtained data but also the transparency and reproducibility of the results [@newlanderEmpiricalStudyEffect2015; @johnsonBestPracticesPublishing2024]. For further reproducibility and replicability, and working towards the goal of open science [@johnsonBestPracticesPublishing2024; @marwickComputationalReproducibilityArchaeological2017], the obtained raw pXRF results can be found online on our online compendium (LINK).

## Results

The pXRF measured several major and minor elements, of which a small amount returned values of 0 or were below the limit of detection (\<LOD). These were uranium (U), thorium (Th), bismuth (Bi), thallium (Tl), mercury (Hg), platinum (Pt), tantalum (Ta), hafnium (Hf), lanthanum (La), antimony (Sb), Tin (Sn), cadmium (Cd), rhodium (Rh), niobium (Nb), selenium (Se), zinc (Zn), nickel (Ni), cobalt (Co) and chromium (Cr). They were removed from the analysis based on their nonexistence, although they can still be found in the raw pXRF results.
